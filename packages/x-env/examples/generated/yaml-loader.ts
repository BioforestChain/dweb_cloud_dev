// Generated by @dweb-cloud/safenv - GenTsPlugin
// Config: comprehensive_test_workspace
// Validator Style: pure
// Export Mode: yaml-file
// Generated at: 2025-08-11T15:31:34.689Z
// DO NOT EDIT - This file is auto-generated

import { readFileSync, existsSync } from 'node:fs'
import { resolve } from 'node:path'
import { load as yamlLoad } from 'js-yaml'

/**
 * TypeScript interface for comprehensive_test_workspace environment variables
 */
export interface ComprehensiveTestWorkspaceVariables {
  /** 工作空间名称 */
  WORKSPACE_NAME: string
  /** 工作空间版本号 */
  WORKSPACE_VERSION?: string
  /** 运行环境 (development/production/test) */
  NODE_ENV: string
  /** 服务器主机地址 */
  SERVER_HOST?: string
  /** 服务器端口号 */
  SERVER_PORT?: number
  /** 主数据库连接字符串 */
  DATABASE_URL: string
  /** 数据库连接池最小连接数 */
  DATABASE_POOL_MIN?: number
  /** 数据库连接池最大连接数 */
  DATABASE_POOL_MAX?: number
  /** Redis连接字符串 */
  REDIS_URL?: string
  /** 默认缓存过期时间（秒） */
  CACHE_DEFAULT_TTL?: number
  /** 外部API基础URL */
  API_BASE_URL?: string
  /** 外部API密钥 */
  API_KEY: string
  /** API请求超时时间（毫秒） */
  API_TIMEOUT?: number
  /** API请求重试次数 */
  API_RETRY_COUNT?: number
  /** JWT签名密钥 */
  JWT_SECRET: string
  /** JWT过期时间 */
  JWT_EXPIRES_IN?: string
  /** BCrypt加密轮数 */
  BCRYPT_ROUNDS?: number
  /** 是否启用日志记录 */
  ENABLE_LOGGING?: boolean
  /** 是否启用指标收集 */
  ENABLE_METRICS?: boolean
  /** 是否启用链路追踪 */
  ENABLE_TRACING?: boolean
  /** 是否启用调试模式 */
  DEBUG_MODE?: boolean
  /** 启用的功能标志列表 */
  FEATURE_FLAGS?: string[]
  /** 日志级别 (debug/info/warn/error) */
  LOG_LEVEL?: string
  /** 日志格式 (json/text) */
  LOG_FORMAT?: string
  /** 日志文件最大保留数量 */
  LOG_MAX_FILES?: number
  /** 监控指标端口 */
  METRICS_PORT?: number
  /** 健康检查路径 */
  HEALTH_CHECK_PATH?: string
  /** CORS允许的源列表 */
  CORS_ORIGINS?: string[]
  /** CORS允许的HTTP方法 */
  CORS_METHODS?: string[]
  /** 速率限制窗口时间（毫秒） */
  RATE_LIMIT_WINDOW?: number
  /** 速率限制最大请求数 */
  RATE_LIMIT_MAX?: number
  /** 文件上传最大大小（字节）50MB */
  UPLOAD_MAX_SIZE?: number
  /** 允许上传的文件类型 */
  UPLOAD_ALLOWED_TYPES?: string[]
  /** SMTP服务器地址 */
  SMTP_HOST?: string
  /** SMTP服务器端口 */
  SMTP_PORT?: number
  /** SMTP用户名 */
  SMTP_USER?: string
  /** SMTP密码 */
  SMTP_PASS?: string
  /** AWS区域 */
  AWS_REGION?: string
  /** AWS访问密钥ID */
  AWS_ACCESS_KEY_ID?: string
  /** AWS私有访问密钥 */
  AWS_SECRET_ACCESS_KEY?: string
  /** S3存储桶名称 */
  S3_BUCKET_NAME?: string
  /** 应用全局配置对象 */
  APP_CONFIG?: Record<string, unknown>
  /** 实验性功能开关 */
  EXPERIMENTAL_FEATURES?: Record<string, unknown>
}

/**
 * Pure TypeScript validation functions (no external dependencies)
 */
// Pure validation functions
const parseString = (value: unknown): string => String(value)
const parseNumber = (value: unknown): number => {
  const num = Number(value)
  if (isNaN(num)) throw new Error(`Invalid number: ${value}`)
  return num
}
const parseBoolean = (value: unknown): boolean => String(value) === 'true'
const parseArray = (value: unknown): string[] =>
  String(value)
    .split(',')
    .map(s => s.trim())
const parseObject = (value: unknown): Record<string, unknown> =>
  JSON.parse(String(value))

/**
 * Main validator function
 */
export const comprehensiveTestWorkspaceSchema = {
  parse: (
    input: Record<string, unknown>
  ): ComprehensiveTestWorkspaceVariables => {
    const result: Partial<ComprehensiveTestWorkspaceVariables> = {}
    const errors: string[] = []

    // Validate WORKSPACE_NAME
    try {
      const value = input['WORKSPACE_NAME']
      if (value === undefined || value === null) {
        errors.push('Required field WORKSPACE_NAME is missing')
      } else {
        result.WORKSPACE_NAME = parseString(value)
      }
    } catch (err) {
      errors.push(`Failed to parse WORKSPACE_NAME: ${err.message}`)
    }

    // Validate WORKSPACE_VERSION
    try {
      const value = input['WORKSPACE_VERSION']
      if (value !== undefined && value !== null) {
        result.WORKSPACE_VERSION = parseString(value)
      } else {
        result.WORKSPACE_VERSION = '1.0.0'
      }
    } catch (err) {
      errors.push(`Failed to parse WORKSPACE_VERSION: ${err.message}`)
    }

    // Validate NODE_ENV
    try {
      const value = input['NODE_ENV']
      if (value === undefined || value === null) {
        errors.push('Required field NODE_ENV is missing')
      } else {
        result.NODE_ENV = parseString(value)
      }
    } catch (err) {
      errors.push(`Failed to parse NODE_ENV: ${err.message}`)
    }

    // Validate SERVER_HOST
    try {
      const value = input['SERVER_HOST']
      if (value !== undefined && value !== null) {
        result.SERVER_HOST = parseString(value)
      } else {
        result.SERVER_HOST = 'localhost'
      }
    } catch (err) {
      errors.push(`Failed to parse SERVER_HOST: ${err.message}`)
    }

    // Validate SERVER_PORT
    try {
      const value = input['SERVER_PORT']
      if (value !== undefined && value !== null) {
        result.SERVER_PORT = parseNumber(value)
      } else {
        result.SERVER_PORT = 3000
      }
    } catch (err) {
      errors.push(`Failed to parse SERVER_PORT: ${err.message}`)
    }

    // Validate DATABASE_URL
    try {
      const value = input['DATABASE_URL']
      if (value === undefined || value === null) {
        errors.push('Required field DATABASE_URL is missing')
      } else {
        result.DATABASE_URL = parseString(value)
      }
    } catch (err) {
      errors.push(`Failed to parse DATABASE_URL: ${err.message}`)
    }

    // Validate DATABASE_POOL_MIN
    try {
      const value = input['DATABASE_POOL_MIN']
      if (value !== undefined && value !== null) {
        result.DATABASE_POOL_MIN = parseNumber(value)
      } else {
        result.DATABASE_POOL_MIN = 2
      }
    } catch (err) {
      errors.push(`Failed to parse DATABASE_POOL_MIN: ${err.message}`)
    }

    // Validate DATABASE_POOL_MAX
    try {
      const value = input['DATABASE_POOL_MAX']
      if (value !== undefined && value !== null) {
        result.DATABASE_POOL_MAX = parseNumber(value)
      } else {
        result.DATABASE_POOL_MAX = 20
      }
    } catch (err) {
      errors.push(`Failed to parse DATABASE_POOL_MAX: ${err.message}`)
    }

    // Validate REDIS_URL
    try {
      const value = input['REDIS_URL']
      if (value !== undefined && value !== null) {
        result.REDIS_URL = parseString(value)
      } else {
        result.REDIS_URL = 'redis://localhost:6379/0'
      }
    } catch (err) {
      errors.push(`Failed to parse REDIS_URL: ${err.message}`)
    }

    // Validate CACHE_DEFAULT_TTL
    try {
      const value = input['CACHE_DEFAULT_TTL']
      if (value !== undefined && value !== null) {
        result.CACHE_DEFAULT_TTL = parseNumber(value)
      } else {
        result.CACHE_DEFAULT_TTL = 3600
      }
    } catch (err) {
      errors.push(`Failed to parse CACHE_DEFAULT_TTL: ${err.message}`)
    }

    // Validate API_BASE_URL
    try {
      const value = input['API_BASE_URL']
      if (value !== undefined && value !== null) {
        result.API_BASE_URL = parseString(value)
      } else {
        result.API_BASE_URL = 'https://api.example.com/v1'
      }
    } catch (err) {
      errors.push(`Failed to parse API_BASE_URL: ${err.message}`)
    }

    // Validate API_KEY
    try {
      const value = input['API_KEY']
      if (value === undefined || value === null) {
        errors.push('Required field API_KEY is missing')
      } else {
        result.API_KEY = parseString(value)
      }
    } catch (err) {
      errors.push(`Failed to parse API_KEY: ${err.message}`)
    }

    // Validate API_TIMEOUT
    try {
      const value = input['API_TIMEOUT']
      if (value !== undefined && value !== null) {
        result.API_TIMEOUT = parseNumber(value)
      } else {
        result.API_TIMEOUT = 10000
      }
    } catch (err) {
      errors.push(`Failed to parse API_TIMEOUT: ${err.message}`)
    }

    // Validate API_RETRY_COUNT
    try {
      const value = input['API_RETRY_COUNT']
      if (value !== undefined && value !== null) {
        result.API_RETRY_COUNT = parseNumber(value)
      } else {
        result.API_RETRY_COUNT = 3
      }
    } catch (err) {
      errors.push(`Failed to parse API_RETRY_COUNT: ${err.message}`)
    }

    // Validate JWT_SECRET
    try {
      const value = input['JWT_SECRET']
      if (value === undefined || value === null) {
        errors.push('Required field JWT_SECRET is missing')
      } else {
        result.JWT_SECRET = parseString(value)
      }
    } catch (err) {
      errors.push(`Failed to parse JWT_SECRET: ${err.message}`)
    }

    // Validate JWT_EXPIRES_IN
    try {
      const value = input['JWT_EXPIRES_IN']
      if (value !== undefined && value !== null) {
        result.JWT_EXPIRES_IN = parseString(value)
      } else {
        result.JWT_EXPIRES_IN = '24h'
      }
    } catch (err) {
      errors.push(`Failed to parse JWT_EXPIRES_IN: ${err.message}`)
    }

    // Validate BCRYPT_ROUNDS
    try {
      const value = input['BCRYPT_ROUNDS']
      if (value !== undefined && value !== null) {
        result.BCRYPT_ROUNDS = parseNumber(value)
      } else {
        result.BCRYPT_ROUNDS = 12
      }
    } catch (err) {
      errors.push(`Failed to parse BCRYPT_ROUNDS: ${err.message}`)
    }

    // Validate ENABLE_LOGGING
    try {
      const value = input['ENABLE_LOGGING']
      if (value !== undefined && value !== null) {
        result.ENABLE_LOGGING = parseBoolean(value)
      } else {
        result.ENABLE_LOGGING = true
      }
    } catch (err) {
      errors.push(`Failed to parse ENABLE_LOGGING: ${err.message}`)
    }

    // Validate ENABLE_METRICS
    try {
      const value = input['ENABLE_METRICS']
      if (value !== undefined && value !== null) {
        result.ENABLE_METRICS = parseBoolean(value)
      } else {
        result.ENABLE_METRICS = false
      }
    } catch (err) {
      errors.push(`Failed to parse ENABLE_METRICS: ${err.message}`)
    }

    // Validate ENABLE_TRACING
    try {
      const value = input['ENABLE_TRACING']
      if (value !== undefined && value !== null) {
        result.ENABLE_TRACING = parseBoolean(value)
      } else {
        result.ENABLE_TRACING = false
      }
    } catch (err) {
      errors.push(`Failed to parse ENABLE_TRACING: ${err.message}`)
    }

    // Validate DEBUG_MODE
    try {
      const value = input['DEBUG_MODE']
      if (value !== undefined && value !== null) {
        result.DEBUG_MODE = parseBoolean(value)
      } else {
        result.DEBUG_MODE = false
      }
    } catch (err) {
      errors.push(`Failed to parse DEBUG_MODE: ${err.message}`)
    }

    // Validate FEATURE_FLAGS
    try {
      const value = input['FEATURE_FLAGS']
      if (value !== undefined && value !== null) {
        result.FEATURE_FLAGS = parseArray(value)
      } else {
        result.FEATURE_FLAGS = ['basic_auth', 'rate_limiting']
      }
    } catch (err) {
      errors.push(`Failed to parse FEATURE_FLAGS: ${err.message}`)
    }

    // Validate LOG_LEVEL
    try {
      const value = input['LOG_LEVEL']
      if (value !== undefined && value !== null) {
        result.LOG_LEVEL = parseString(value)
      } else {
        result.LOG_LEVEL = 'info'
      }
    } catch (err) {
      errors.push(`Failed to parse LOG_LEVEL: ${err.message}`)
    }

    // Validate LOG_FORMAT
    try {
      const value = input['LOG_FORMAT']
      if (value !== undefined && value !== null) {
        result.LOG_FORMAT = parseString(value)
      } else {
        result.LOG_FORMAT = 'json'
      }
    } catch (err) {
      errors.push(`Failed to parse LOG_FORMAT: ${err.message}`)
    }

    // Validate LOG_MAX_FILES
    try {
      const value = input['LOG_MAX_FILES']
      if (value !== undefined && value !== null) {
        result.LOG_MAX_FILES = parseNumber(value)
      } else {
        result.LOG_MAX_FILES = 10
      }
    } catch (err) {
      errors.push(`Failed to parse LOG_MAX_FILES: ${err.message}`)
    }

    // Validate METRICS_PORT
    try {
      const value = input['METRICS_PORT']
      if (value !== undefined && value !== null) {
        result.METRICS_PORT = parseNumber(value)
      } else {
        result.METRICS_PORT = 9090
      }
    } catch (err) {
      errors.push(`Failed to parse METRICS_PORT: ${err.message}`)
    }

    // Validate HEALTH_CHECK_PATH
    try {
      const value = input['HEALTH_CHECK_PATH']
      if (value !== undefined && value !== null) {
        result.HEALTH_CHECK_PATH = parseString(value)
      } else {
        result.HEALTH_CHECK_PATH = '/health'
      }
    } catch (err) {
      errors.push(`Failed to parse HEALTH_CHECK_PATH: ${err.message}`)
    }

    // Validate CORS_ORIGINS
    try {
      const value = input['CORS_ORIGINS']
      if (value !== undefined && value !== null) {
        result.CORS_ORIGINS = parseArray(value)
      } else {
        result.CORS_ORIGINS = ['http://localhost:3000', 'http://localhost:3001']
      }
    } catch (err) {
      errors.push(`Failed to parse CORS_ORIGINS: ${err.message}`)
    }

    // Validate CORS_METHODS
    try {
      const value = input['CORS_METHODS']
      if (value !== undefined && value !== null) {
        result.CORS_METHODS = parseArray(value)
      } else {
        result.CORS_METHODS = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']
      }
    } catch (err) {
      errors.push(`Failed to parse CORS_METHODS: ${err.message}`)
    }

    // Validate RATE_LIMIT_WINDOW
    try {
      const value = input['RATE_LIMIT_WINDOW']
      if (value !== undefined && value !== null) {
        result.RATE_LIMIT_WINDOW = parseNumber(value)
      } else {
        result.RATE_LIMIT_WINDOW = 900000
      }
    } catch (err) {
      errors.push(`Failed to parse RATE_LIMIT_WINDOW: ${err.message}`)
    }

    // Validate RATE_LIMIT_MAX
    try {
      const value = input['RATE_LIMIT_MAX']
      if (value !== undefined && value !== null) {
        result.RATE_LIMIT_MAX = parseNumber(value)
      } else {
        result.RATE_LIMIT_MAX = 100
      }
    } catch (err) {
      errors.push(`Failed to parse RATE_LIMIT_MAX: ${err.message}`)
    }

    // Validate UPLOAD_MAX_SIZE
    try {
      const value = input['UPLOAD_MAX_SIZE']
      if (value !== undefined && value !== null) {
        result.UPLOAD_MAX_SIZE = parseNumber(value)
      } else {
        result.UPLOAD_MAX_SIZE = 52428800
      }
    } catch (err) {
      errors.push(`Failed to parse UPLOAD_MAX_SIZE: ${err.message}`)
    }

    // Validate UPLOAD_ALLOWED_TYPES
    try {
      const value = input['UPLOAD_ALLOWED_TYPES']
      if (value !== undefined && value !== null) {
        result.UPLOAD_ALLOWED_TYPES = parseArray(value)
      } else {
        result.UPLOAD_ALLOWED_TYPES = [
          'image/jpeg',
          'image/png',
          'application/pdf',
        ]
      }
    } catch (err) {
      errors.push(`Failed to parse UPLOAD_ALLOWED_TYPES: ${err.message}`)
    }

    // Validate SMTP_HOST
    try {
      const value = input['SMTP_HOST']
      if (value !== undefined && value !== null) {
        result.SMTP_HOST = parseString(value)
      } else {
        result.SMTP_HOST = 'smtp.example.com'
      }
    } catch (err) {
      errors.push(`Failed to parse SMTP_HOST: ${err.message}`)
    }

    // Validate SMTP_PORT
    try {
      const value = input['SMTP_PORT']
      if (value !== undefined && value !== null) {
        result.SMTP_PORT = parseNumber(value)
      } else {
        result.SMTP_PORT = 587
      }
    } catch (err) {
      errors.push(`Failed to parse SMTP_PORT: ${err.message}`)
    }

    // Validate SMTP_USER
    try {
      const value = input['SMTP_USER']
      if (value !== undefined && value !== null) {
        result.SMTP_USER = parseString(value)
      } else {
        result.SMTP_USER = 'no-reply@example.com'
      }
    } catch (err) {
      errors.push(`Failed to parse SMTP_USER: ${err.message}`)
    }

    // Validate SMTP_PASS
    try {
      const value = input['SMTP_PASS']
      if (value !== undefined && value !== null) {
        result.SMTP_PASS = parseString(value)
      } else {
        result.SMTP_PASS = 'smtp-password'
      }
    } catch (err) {
      errors.push(`Failed to parse SMTP_PASS: ${err.message}`)
    }

    // Validate AWS_REGION
    try {
      const value = input['AWS_REGION']
      if (value !== undefined && value !== null) {
        result.AWS_REGION = parseString(value)
      } else {
        result.AWS_REGION = 'us-east-1'
      }
    } catch (err) {
      errors.push(`Failed to parse AWS_REGION: ${err.message}`)
    }

    // Validate AWS_ACCESS_KEY_ID
    try {
      const value = input['AWS_ACCESS_KEY_ID']
      if (value !== undefined && value !== null) {
        result.AWS_ACCESS_KEY_ID = parseString(value)
      } else {
        result.AWS_ACCESS_KEY_ID = 'AKIA...'
      }
    } catch (err) {
      errors.push(`Failed to parse AWS_ACCESS_KEY_ID: ${err.message}`)
    }

    // Validate AWS_SECRET_ACCESS_KEY
    try {
      const value = input['AWS_SECRET_ACCESS_KEY']
      if (value !== undefined && value !== null) {
        result.AWS_SECRET_ACCESS_KEY = parseString(value)
      } else {
        result.AWS_SECRET_ACCESS_KEY = 'secret-key'
      }
    } catch (err) {
      errors.push(`Failed to parse AWS_SECRET_ACCESS_KEY: ${err.message}`)
    }

    // Validate S3_BUCKET_NAME
    try {
      const value = input['S3_BUCKET_NAME']
      if (value !== undefined && value !== null) {
        result.S3_BUCKET_NAME = parseString(value)
      } else {
        result.S3_BUCKET_NAME = 'safenv-test-bucket'
      }
    } catch (err) {
      errors.push(`Failed to parse S3_BUCKET_NAME: ${err.message}`)
    }

    // Validate APP_CONFIG
    try {
      const value = input['APP_CONFIG']
      if (value !== undefined && value !== null) {
        result.APP_CONFIG = parseObject(value)
      } else {
        result.APP_CONFIG = {
          theme: 'light',
          language: 'zh-CN',
          timezone: 'Asia/Shanghai',
          currency: 'CNY',
          dateFormat: 'YYYY-MM-DD',
          timeFormat: 'HH:mm:ss',
        }
      }
    } catch (err) {
      errors.push(`Failed to parse APP_CONFIG: ${err.message}`)
    }

    // Validate EXPERIMENTAL_FEATURES
    try {
      const value = input['EXPERIMENTAL_FEATURES']
      if (value !== undefined && value !== null) {
        result.EXPERIMENTAL_FEATURES = parseObject(value)
      } else {
        result.EXPERIMENTAL_FEATURES = {
          newUI: false,
          enhancedSecurity: true,
          betaAPI: false,
        }
      }
    } catch (err) {
      errors.push(`Failed to parse EXPERIMENTAL_FEATURES: ${err.message}`)
    }

    if (errors.length > 0) {
      throw new Error(`Validation failed: ${errors.join(', ')}`)
    }

    return result as ComprehensiveTestWorkspaceVariables
  },
}

/**
 * Load configuration from YAML file
 */
const yamlFile = resolve(
  import.meta.dirname,
  'comprehensive_test_workspace.safenv.yaml'
)
let yamlData = {}

if (existsSync(yamlFile)) {
  const yamlContent = readFileSync(yamlFile, 'utf-8')
  yamlData = yamlLoad(yamlContent) as Record<string, unknown>
}

export const yamlConfig = comprehensiveTestWorkspaceSchema.parse(yamlData)
