{
  "pluginName": "genTs",
  "version": "1.0.0",
  "timestamp": "2025-08-11T09:26:57.000Z",
  "config": {
    "outputPath": "./types/env.d.ts",
    "validatorStyle": "zod",
    "exportMode": "process.env",
    "exportValidator": true,
    "variableCount": 3
  },
  "expectedOutput": "// Generated TypeScript definitions\nexport interface ProcessEnv {\n  /** 数据库 URL */\n  DATABASE_URL: string\n  \n  /** Redis 端口 */\n  REDIS_PORT: number\n  \n  /** 启用缓存 */\n  ENABLE_CACHE: boolean\n}\n\n// Zod validation schema\nimport { z } from 'zod'\n\nexport const envSchema = z.object({\n  DATABASE_URL: z.string().default('postgresql://localhost:5432/db'),\n  REDIS_PORT: z.number().default(6379),\n  ENABLE_CACHE: z.boolean().default(false)\n})\n\nexport type ValidatedEnv = z.infer<typeof envSchema>\n\n// Environment validation function\nexport function validateEnv(env: Record<string, any> = process.env): ValidatedEnv {\n  return envSchema.parse(env)\n}\n\n// Usage example:\n// const validatedEnv = validateEnv()\n// console.log(validatedEnv.DATABASE_URL) // Type-safe access",
  "checksum": "d4e5f6789012345678901234abcdef01",
  "validation": {
    "hasInterface": true,
    "hasZodSchema": true,
    "hasValidationFunction": true,
    "hasTypeComments": true,
    "hasUsageExample": true,
    "contentLength": 847
  },
  "testCases": [
    {
      "name": "zod-validation-generation",
      "description": "测试 Zod 验证器生成",
      "config": {
        "validatorStyle": "zod",
        "exportMode": "process.env"
      },
      "expectedFeatures": [
        "ProcessEnv interface",
        "Zod schema definition",
        "validateEnv function",
        "Type comments",
        "Usage example"
      ]
    },
    {
      "name": "pure-validation-generation",
      "description": "测试纯 TypeScript 验证器生成",
      "config": {
        "validatorStyle": "pure",
        "exportMode": "process.env-static"
      },
      "expectedOutput": "// Generated TypeScript definitions\nexport interface ProcessEnv {\n  NODE_ENV: string\n  LOG_LEVEL: string\n}\n\nexport function validateEnv(env: Record<string, any>): ProcessEnv {\n  const validated: ProcessEnv = {\n    NODE_ENV: env.NODE_ENV || 'development',\n    LOG_LEVEL: env.LOG_LEVEL || 'info'\n  }\n  return validated\n}"
    },
    {
      "name": "workspace-types-generation",
      "description": "测试工作空间级别的类型生成",
      "config": {
        "workspace": true,
        "outputPath": "./workspace-types/env.d.ts"
      },
      "expectedBehavior": {
        "generateInRoot": true,
        "includeAllVariables": true,
        "mergeSubprojectTypes": true
      }
    }
  ],
  "validatorStyles": {
    "zod": {
      "description": "使用 Zod 库进行运行时验证",
      "features": ["Runtime validation", "Type inference", "Error messages"],
      "dependencies": ["zod"]
    },
    "pure": {
      "description": "纯 TypeScript 验证，无外部依赖",
      "features": [
        "Compile-time types",
        "No runtime overhead",
        "Simple validation"
      ],
      "dependencies": []
    },
    "none": {
      "description": "仅生成类型定义，无验证",
      "features": ["Type definitions only", "Minimal output"],
      "dependencies": []
    }
  },
  "exportModes": {
    "process.env": "直接从 process.env 导出",
    "process.env-static": "静态 process.env 访问",
    "env-file": "从 .env 文件导出",
    "json-file": "从 JSON 文件导出",
    "yaml-file": "从 YAML 文件导出"
  }
}
