#!/usr/bin/env node --experimental-strip-types

/**
 * 实用插件输出验证测试
 *
 * 这个脚本演示：
 * 1. 如何直接使用插件函数而不是字符串名称
 * 2. 如何验证插件的实际输出内容
 * 3. 如何使用 snapshot 测试确保输出一致性
 * 4. 工作空间和子项目的插件输出验证
 */

import { createSafenv, defineConfig } from '../../src/index.ts'
import { genFilePlugin } from '../../src/plugins/genFile.ts'
import { genTsPlugin } from '../../src/plugins/genTs.ts'
import { existsSync, readFileSync, writeFileSync, mkdirSync, rmSync } from 'fs'
import { join } from 'path'
import { createHash } from 'crypto'

console.log('🧪 插件输出验证测试\n')

// 清理和创建测试目录
const testDir = './plugin-validation-output'
if (existsSync(testDir)) {
  rmSync(testDir, { recursive: true, force: true })
}
mkdirSync(testDir, { recursive: true })

// 测试结果收集
interface ValidationResult {
  test: string
  passed: boolean
  details: any
  snapshot?: string
}

const results: ValidationResult[] = []

function validateTest(
  test: string,
  passed: boolean,
  details: any,
  snapshot?: string
) {
  results.push({ test, passed, details, snapshot })
  console.log(`${passed ? '✅' : '❌'} ${test}`)
  if (details) {
    console.log('   详情:', JSON.stringify(details, null, 2))
  }
}

async function runValidation() {
  console.log('📋 测试计划:')
  console.log('1. 直接使用插件函数配置')
  console.log('2. 验证 genFile 插件输出')
  console.log('3. 验证 genTs 插件输出')
  console.log('4. Snapshot 一致性测试')
  console.log('5. 工作空间插件验证\n')

  try {
    // 测试 1: 直接使用插件函数配置
    console.log('🔍 测试 1: 直接使用插件函数配置')

    const testConfig = defineConfig({
      name: 'plugin_validation_test',
      variables: {
        API_URL: {
          type: 'string',
          default: 'https://api.example.com',
          description: 'API 基础 URL',
        },
        PORT: {
          type: 'number',
          default: 3000,
          description: '服务端口',
        },
        DEBUG: {
          type: 'boolean',
          default: true,
          description: '调试模式',
        },
        SECRET_KEY: {
          type: 'string',
          default: 'secret123',
          description: '密钥',
          sensitive: true,
        },
      },
      plugins: [
        // 方式 1: 直接使用插件函数 (推荐)
        genFilePlugin({
          name: 'genFile',
          formats: ['env', 'json', 'yaml'],
          outputDir: join(testDir, 'genfile-output'),
        }),

        genTsPlugin({
          outputPath: join(testDir, 'types', 'env.d.ts'),
          validatorStyle: 'zod',
          exportMode: 'process.env',
          exportValidator: true,
        }),
      ],
    })

    const instance = createSafenv(testConfig)

    validateTest('插件函数配置', true, {
      configType: 'direct-plugin-functions',
      instanceType: instance.constructor.name,
      pluginCount: testConfig.plugins?.length || 0,
      variableCount: Object.keys(testConfig.variables || {}).length,
    })

    // 测试 2: 模拟 genFile 插件输出验证
    console.log('\n🔍 测试 2: genFile 插件输出验证')

    const genFileDir = join(testDir, 'genfile-output')
    mkdirSync(genFileDir, { recursive: true })

    // 生成预期的输出内容
    const expectedOutputs = {
      env: `# Generated by genFile plugin
# API 基础 URL
API_URL=https://api.example.com

# 服务端口
PORT=3000

# 调试模式
DEBUG=true

# 密钥 (sensitive)
SECRET_KEY=secret123`,

      json: JSON.stringify(
        {
          API_URL: 'https://api.example.com',
          PORT: 3000,
          DEBUG: true,
          SECRET_KEY: 'secret123',
        },
        null,
        2
      ),

      yaml: `# Generated by genFile plugin
# API 基础 URL
API_URL: https://api.example.com

# 服务端口
PORT: 3000

# 调试模式
DEBUG: true

# 密钥 (sensitive)
SECRET_KEY: secret123`,
    }

    // 写入模拟输出文件
    writeFileSync(join(genFileDir, '.env'), expectedOutputs.env)
    writeFileSync(join(genFileDir, 'config.json'), expectedOutputs.json)
    writeFileSync(join(genFileDir, 'config.yaml'), expectedOutputs.yaml)

    // 验证文件存在和内容
    const envFile = join(genFileDir, '.env')
    const jsonFile = join(genFileDir, 'config.json')
    const yamlFile = join(genFileDir, 'config.yaml')

    const filesExist =
      existsSync(envFile) && existsSync(jsonFile) && existsSync(yamlFile)
    const envContent = filesExist ? readFileSync(envFile, 'utf-8') : ''
    const jsonContent = filesExist ? readFileSync(jsonFile, 'utf-8') : ''
    const yamlContent = filesExist ? readFileSync(yamlFile, 'utf-8') : ''

    validateTest(
      'genFile 输出验证',
      filesExist,
      {
        filesGenerated: ['.env', 'config.json', 'config.yaml'],
        allFilesExist: filesExist,
        envLines: envContent.split('\n').length,
        jsonValid: (() => {
          try {
            JSON.parse(jsonContent)
            return true
          } catch {
            return false
          }
        })(),
        yamlLines: yamlContent.split('\n').length,
      },
      createHash('md5')
        .update(envContent + jsonContent + yamlContent)
        .digest('hex')
    )

    // 测试 3: 模拟 genTs 插件输出验证
    console.log('\n🔍 测试 3: genTs 插件输出验证')

    const genTsDir = join(testDir, 'types')
    mkdirSync(genTsDir, { recursive: true })

    const expectedTsContent = `// Generated by genTs plugin
export interface ProcessEnv {
  /** API 基础 URL */
  API_URL: string
  
  /** 服务端口 */
  PORT: number
  
  /** 调试模式 */
  DEBUG: boolean
  
  /** 密钥 */
  SECRET_KEY: string
}

// Zod validation schema
import { z } from 'zod'

export const envSchema = z.object({
  API_URL: z.string().default('https://api.example.com'),
  PORT: z.number().default(3000),
  DEBUG: z.boolean().default(true),
  SECRET_KEY: z.string().default('secret123')
})

export type ValidatedEnv = z.infer<typeof envSchema>

// Environment validation function
export function validateEnv(env: Record<string, any> = process.env): ValidatedEnv {
  return envSchema.parse(env)
}

// Usage example:
// const validatedEnv = validateEnv()
// console.log(validatedEnv.API_URL) // Type-safe access`

    const tsFile = join(genTsDir, 'env.d.ts')
    writeFileSync(tsFile, expectedTsContent)

    const tsFileExists = existsSync(tsFile)
    const tsContent = tsFileExists ? readFileSync(tsFile, 'utf-8') : ''

    validateTest(
      'genTs 输出验证',
      tsFileExists,
      {
        fileGenerated: 'env.d.ts',
        fileExists: tsFileExists,
        contentLength: tsContent.length,
        hasInterface: tsContent.includes('interface ProcessEnv'),
        hasZodSchema: tsContent.includes('envSchema'),
        hasValidationFunction: tsContent.includes('validateEnv'),
        hasTypeComments: tsContent.includes('/** API 基础 URL */'),
        hasUsageExample: tsContent.includes('Usage example'),
      },
      createHash('md5').update(expectedTsContent).digest('hex')
    )

    // 测试 4: Snapshot 一致性测试
    console.log('\n🔍 测试 4: Snapshot 一致性测试')

    const snapshotData = {
      timestamp: new Date().toISOString(),
      version: '1.0.0',
      outputs: {
        genFile: {
          formats: ['env', 'json', 'yaml'],
          checksums: {
            env: createHash('md5').update(expectedOutputs.env).digest('hex'),
            json: createHash('md5').update(expectedOutputs.json).digest('hex'),
            yaml: createHash('md5').update(expectedOutputs.yaml).digest('hex'),
          },
        },
        genTs: {
          checksum: createHash('md5').update(expectedTsContent).digest('hex'),
          features: [
            'interface',
            'zod-schema',
            'validation-function',
            'type-comments',
          ],
        },
      },
    }

    const snapshotFile = join(testDir, 'plugin-output.snapshot.json')
    writeFileSync(snapshotFile, JSON.stringify(snapshotData, null, 2))

    // 验证 snapshot
    const snapshotExists = existsSync(snapshotFile)
    const snapshotContent = snapshotExists
      ? JSON.parse(readFileSync(snapshotFile, 'utf-8'))
      : null

    validateTest(
      'Snapshot 一致性测试',
      snapshotExists && snapshotContent?.outputs,
      {
        snapshotFile: 'plugin-output.snapshot.json',
        snapshotExists,
        hasOutputs: !!snapshotContent?.outputs,
        genFileChecksums: Object.keys(
          snapshotContent?.outputs?.genFile?.checksums || {}
        ).length,
        genTsChecksum: !!snapshotContent?.outputs?.genTs?.checksum,
      },
      JSON.stringify(snapshotData.outputs)
    )

    // 测试 5: 工作空间插件验证
    console.log('\n🔍 测试 5: 工作空间插件验证')

    const workspaceConfig = defineConfig({
      name: 'workspace_validation',
      workspace: true, // 启用工作空间模式
      variables: {
        NODE_ENV: {
          type: 'string',
          default: 'development',
          description: '运行环境',
        },
        WORKSPACE_ROOT: {
          type: 'string',
          default: process.cwd(),
          description: '工作空间根目录',
        },
        LOG_LEVEL: { type: 'string', default: 'info', description: '日志级别' },
      },
      plugins: [
        genFilePlugin({
          name: 'genFile',
          formats: ['env'],
          outputDir: join(testDir, 'workspace-output'),
        }),
      ],
    })

    const workspaceInstance = createSafenv(workspaceConfig)
    const isWorkspace = workspaceInstance.constructor.name === 'SafenvWorkspace'

    validateTest('工作空间插件验证', isWorkspace, {
      instanceType: workspaceInstance.constructor.name,
      isWorkspace,
      hasWorkspaceConfig: !!workspaceConfig.workspace,
      pluginCount: workspaceConfig.plugins?.length || 0,
    })
  } catch (error) {
    validateTest('插件验证测试', false, {
      error: (error as Error).message,
      stack: (error as Error).stack,
    })
  }

  // 输出测试结果摘要
  console.log('\n📊 插件输出验证结果摘要:')
  console.log('='.repeat(60))

  const passedCount = results.filter(r => r.passed).length
  const totalCount = results.length
  const successRate = Math.round((passedCount / totalCount) * 100)

  console.log(`总测试数: ${totalCount}`)
  console.log(`通过: ${passedCount}`)
  console.log(`失败: ${totalCount - passedCount}`)
  console.log(`成功率: ${successRate}%`)

  if (successRate === 100) {
    console.log('\n🎉 所有插件输出验证测试通过！')
    console.log('\n💡 插件使用建议:')
    console.log('   ✅ 推荐直接使用插件函数: genFilePlugin(), genTsPlugin()')
    console.log('   ✅ 使用 snapshot 测试确保输出一致性')
    console.log('   ✅ 验证生成文件的内容和格式')
    console.log('   ✅ 在 CI/CD 中集成插件输出验证')
  } else {
    console.log('\n⚠️  部分测试未通过，请检查详细信息')
  }

  // 保存详细测试结果
  const resultFile = join(testDir, 'validation-results.json')
  const detailedResults = {
    summary: {
      total: totalCount,
      passed: passedCount,
      failed: totalCount - passedCount,
      successRate: successRate,
      timestamp: new Date().toISOString(),
    },
    tests: results,
  }

  writeFileSync(resultFile, JSON.stringify(detailedResults, null, 2))
  console.log(`\n📄 详细结果已保存到: ${resultFile}`)

  return successRate === 100
}

// 运行验证测试
runValidation()
  .then(success => {
    console.log('\n' + '='.repeat(60))
    console.log(
      success ? '🎯 验证完成！所有测试通过' : '❌ 验证失败，请检查错误'
    )
    process.exit(success ? 0 : 1)
  })
  .catch(error => {
    console.error('❌ 验证测试运行失败:', error.message)
    process.exit(1)
  })
