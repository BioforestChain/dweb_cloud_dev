{"version":3,"file":"index.mjs","names":["options: SafenvOptions","pluginConfig: SafenvPluginConfig","pluginMap: Record<string, new (options?: any) => SafenvPlugin>","GenFilePlugin","GenTsPlugin","plugins: (SafenvPlugin | SafenvPluginConfig)[]","resolvedPlugins: SafenvPlugin[]","config: SafenvConfig","resolved: Record<string, any>","value: any","type: string","context: SafenvContext","options: SafenvOptions","path: string","options: SafenvOptions","options: SafenvOptions","loadConfig","configs: SafenvConfig[]","url: string","filePath: string","data: Record<string, any>","content: string","mimeType: string","result: Record<string, any>","options: SafenvOptions"],"sources":["../src/core.ts","../src/server.ts","../src/builder.ts","../src/workspace.ts","../src/adapters.ts","../src/index.ts"],"sourcesContent":["import { loadConfig } from \"unconfig\";\nimport { resolve } from \"node:path\";\nimport type {\n  SafenvConfig,\n  SafenvOptions,\n  SafenvContext,\n  SafenvPlugin,\n  SafenvPluginConfig,\n} from \"./types.ts\";\n\nexport class SafenvCore {\n  private config: SafenvConfig | null = null;\n  protected options: SafenvOptions;\n\n  constructor(options: SafenvOptions = {}) {\n    this.options = {\n      mode: \"serve\",\n      configFile: \"safenv.config\",\n      outputDir: \"./dist\",\n      watch: true,\n      ...options,\n    };\n  }\n\n  async loadConfig(): Promise<SafenvConfig> {\n    const { config } = await loadConfig<SafenvConfig>({\n      sources: [\n        {\n          files: [\n            `${this.options.configFile}.ts`,\n            `${this.options.configFile}.js`,\n            `${this.options.configFile}.json`,\n            `${this.options.configFile}.yaml`,\n            `${this.options.configFile}.yml`,\n          ],\n        },\n      ],\n      defaults: {\n        name: \"safenv\",\n        variables: {},\n        plugins: [],\n      },\n    });\n\n    if (!config) {\n      throw new Error(\"No safenv config found\");\n    }\n\n    this.config = config;\n    return config;\n  }\n\n  private async loadPlugin(\n    pluginConfig: SafenvPluginConfig\n  ): Promise<SafenvPlugin> {\n    const { GenFilePlugin } = await import(\"./plugins/genFile.ts\");\n    const { GenTsPlugin } = await import(\"./plugins/genTs.ts\");\n\n    const pluginMap: Record<string, new (options?: any) => SafenvPlugin> = {\n      genFilePlugin: GenFilePlugin,\n      genTsPlugin: GenTsPlugin,\n    };\n\n    const PluginClass = pluginMap[pluginConfig.name];\n    if (!PluginClass) {\n      throw new Error(`Unknown plugin: ${pluginConfig.name}`);\n    }\n\n    return new PluginClass(pluginConfig.options);\n  }\n\n  private async resolvePlugins(\n    plugins: (SafenvPlugin | SafenvPluginConfig)[]\n  ): Promise<SafenvPlugin[]> {\n    const resolvedPlugins: SafenvPlugin[] = [];\n\n    for (const plugin of plugins) {\n      if (\"apply\" in plugin) {\n        resolvedPlugins.push(plugin);\n      } else {\n        const resolvedPlugin = await this.loadPlugin(plugin);\n        resolvedPlugins.push(resolvedPlugin);\n      }\n    }\n\n    return resolvedPlugins;\n  }\n\n  async resolveVariables(config: SafenvConfig): Promise<Record<string, any>> {\n    const resolved: Record<string, any> = {};\n\n    for (const [key, variable] of Object.entries(config.variables)) {\n      let value = process.env[key] ?? variable.default;\n\n      if (variable.required && value === undefined) {\n        throw new Error(`Required variable ${key} is not set`);\n      }\n\n      if (value !== undefined) {\n        value = this.parseValue(value, variable.type);\n\n        if (variable.validate) {\n          const result = variable.validate(value);\n          if (result !== true) {\n            throw new Error(`Validation failed for ${key}: ${result}`);\n          }\n        }\n      }\n\n      resolved[key] = value;\n    }\n\n    return resolved;\n  }\n\n  private parseValue(value: any, type: string): any {\n    if (typeof value === \"string\") {\n      switch (type) {\n        case \"number\":\n          return Number(value);\n        case \"boolean\":\n          return value.toLowerCase() === \"true\";\n        case \"array\":\n          return value.split(\",\").map((v) => v.trim());\n        case \"object\":\n          return JSON.parse(value);\n        default:\n          return value;\n      }\n    }\n    return value;\n  }\n\n  async run(): Promise<void> {\n    const config = await this.loadConfig();\n    const resolvedVariables = await this.resolveVariables(config);\n    const resolvedPlugins = await this.resolvePlugins(config.plugins || []);\n\n    const context: SafenvContext = {\n      config,\n      resolvedVariables,\n      mode: this.options.mode!,\n      outputDir: resolve(this.options.outputDir!),\n    };\n\n    for (const plugin of resolvedPlugins) {\n      await plugin.apply(context);\n    }\n  }\n}\n","import { watch } from 'chokidar'\nimport { SafenvCore } from './core.ts'\nimport type { SafenvOptions } from './types.ts'\n\nexport class SafenvServer extends SafenvCore {\n  private watcher: any = null\n\n  constructor(options: SafenvOptions = {}) {\n    super({ ...options, mode: 'serve' })\n  }\n\n  async start(): Promise<void> {\n    await this.run()\n\n    if (this.options.watch) {\n      this.startWatching()\n    }\n  }\n\n  private startWatching(): void {\n    const watchPatterns = [\n      `${this.options.configFile}.*`,\n      '**/*.safenv.*'\n    ]\n\n    this.watcher = watch(watchPatterns, {\n      ignored: ['node_modules/**', '.git/**'],\n      persistent: true\n    })\n\n    this.watcher.on('change', async (path: string) => {\n      console.log(`Config changed: ${path}`)\n      try {\n        await this.run()\n        console.log('Safenv updated successfully')\n      } catch (error) {\n        console.error('Error updating safenv:', error)\n      }\n    })\n\n    console.log('Watching for config changes...')\n  }\n\n  async stop(): Promise<void> {\n    if (this.watcher) {\n      await this.watcher.close()\n      this.watcher = null\n    }\n  }\n}\n","import { SafenvCore } from './core.ts'\nimport type { SafenvOptions } from './types.ts'\n\nexport class SafenvBuilder extends SafenvCore {\n  constructor(options: SafenvOptions = {}) {\n    super({ ...options, mode: 'build', watch: false })\n  }\n\n  async build(): Promise<void> {\n    console.log('Building safenv configuration...')\n    \n    try {\n      await this.run()\n      console.log('Safenv build completed successfully')\n    } catch (error) {\n      console.error('Error building safenv:', error)\n      throw error\n    }\n  }\n}\n","import { resolve, dirname } from 'node:path'\nimport { SafenvCore } from './core.ts'\nimport type { SafenvOptions, SafenvConfig } from './types.ts'\n\nexport interface WorkspaceConfig {\n  workspace: string[]\n  [key: string]: any\n}\n\nexport class SafenvWorkspace {\n  private workspaceConfig: WorkspaceConfig | null = null\n\n  constructor(private options: SafenvOptions = {}) {}\n\n  async loadWorkspace(): Promise<SafenvConfig[]> {\n    const { loadConfig } = await import('unconfig')\n    \n    const { config } = await loadConfig<WorkspaceConfig>({\n      sources: [\n        {\n          files: [\n            `${this.options.configFile || 'safenv.config'}.ts`,\n            `${this.options.configFile || 'safenv.config'}.js`,\n            `${this.options.configFile || 'safenv.config'}.json`,\n            `${this.options.configFile || 'safenv.config'}.yaml`,\n            `${this.options.configFile || 'safenv.config'}.yml`\n          ]\n        }\n      ]\n    })\n\n    if (!config || !config.workspace) {\n      throw new Error('No workspace configuration found')\n    }\n\n    this.workspaceConfig = config\n    const configs: SafenvConfig[] = []\n\n    for (const workspacePath of config.workspace) {\n      const fullPath = resolve(workspacePath)\n      const safenv = new SafenvCore({\n        ...this.options,\n        configFile: resolve(fullPath, 'safenv.config')\n      })\n\n      try {\n        const workspaceConfig = await safenv.loadConfig()\n        configs.push(workspaceConfig)\n      } catch (error) {\n        console.warn(`Failed to load workspace config at ${fullPath}:`, error)\n      }\n    }\n\n    return configs\n  }\n\n  async runWorkspace(): Promise<void> {\n    const configs = await this.loadWorkspace()\n    \n    for (const config of configs) {\n      const safenv = new SafenvCore({\n        ...this.options,\n        configFile: resolve(dirname(config.name), 'safenv.config')\n      })\n      \n      await safenv.run()\n    }\n  }\n}\n","import type { ImportExportAdapter } from './types.ts'\n\n// Browser API types\ndeclare global {\n  interface Window {\n    showOpenFilePicker?: (options?: any) => Promise<any[]>\n    showSaveFilePicker?: (options?: any) => Promise<any>\n  }\n}\n\nexport class HttpImportExportAdapter implements ImportExportAdapter {\n  async import(url: string): Promise<Record<string, any>> {\n    const response = await fetch(url)\n    if (!response.ok) {\n      throw new Error(`Failed to import from ${url}: ${response.statusText}`)\n    }\n    return response.json() as Promise<Record<string, any>>\n  }\n\n  async export(filePath: string, data: Record<string, any>): Promise<void> {\n    const response = await fetch(filePath, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n\n    if (!response.ok) {\n      throw new Error(`Failed to export to ${filePath}: ${response.statusText}`)\n    }\n  }\n}\n\nexport class FileImportExportAdapter implements ImportExportAdapter {\n  async import(filePath: string): Promise<Record<string, any>> {\n    // Browser environment with File System Access API\n    const hasWindow = typeof globalThis !== 'undefined' && 'window' in globalThis\n    const window = hasWindow ? (globalThis as any).window : undefined\n    \n    if (window && 'showOpenFilePicker' in window) {\n      const [fileHandle] = await window.showOpenFilePicker({\n        types: [{\n          description: 'Configuration files',\n          accept: {\n            'application/json': ['.json'],\n            'application/x-yaml': ['.yaml', '.yml'],\n            'text/plain': ['.env', '.toml']\n          }\n        }]\n      })\n      \n      const file = await fileHandle.getFile()\n      const content = await file.text()\n      \n      if (file.name.endsWith('.json')) {\n        return JSON.parse(content)\n      } else if (file.name.endsWith('.yaml') || file.name.endsWith('.yml')) {\n        const yaml = await import('js-yaml')\n        return yaml.load(content) as Record<string, any>\n      } else if (file.name.endsWith('.toml')) {\n        const TOML = await import('@iarna/toml')\n        return TOML.parse(content)\n      } else {\n        return this.parseEnvFile(content)\n      }\n    } else {\n      const fs = await import('fs')\n      const content = fs.readFileSync(filePath, 'utf8')\n      \n      if (filePath.endsWith('.json')) {\n        return JSON.parse(content)\n      } else if (filePath.endsWith('.yaml') || filePath.endsWith('.yml')) {\n        const yaml = await import('js-yaml')\n        return yaml.load(content) as Record<string, any>\n      } else if (filePath.endsWith('.toml')) {\n        const TOML = await import('@iarna/toml')\n        return TOML.parse(content)\n      } else {\n        return this.parseEnvFile(content)\n      }\n    }\n  }\n\n  async export(filePath: string, data: Record<string, any>): Promise<void> {\n    let content: string\n    let mimeType: string\n\n    if (filePath.endsWith('.json')) {\n      content = JSON.stringify(data, null, 2)\n      mimeType = 'application/json'\n    } else if (filePath.endsWith('.yaml') || filePath.endsWith('.yml')) {\n      const yaml = await import('js-yaml')\n      content = yaml.dump(data)\n      mimeType = 'application/x-yaml'\n    } else if (filePath.endsWith('.toml')) {\n      const TOML = await import('@iarna/toml')\n      content = TOML.stringify(data)\n      mimeType = 'application/toml'\n    } else {\n      content = this.generateEnvFile(data)\n      mimeType = 'text/plain'\n    }\n\n    // Browser environment with File System Access API\n    const hasWindow = typeof globalThis !== 'undefined' && 'window' in globalThis\n    const window = hasWindow ? (globalThis as any).window : undefined\n    \n    if (window && 'showSaveFilePicker' in window) {\n      const fileHandle = await window.showSaveFilePicker({\n        suggestedName: filePath,\n        types: [{\n          description: 'Configuration file',\n          accept: { [mimeType]: [filePath.substring(filePath.lastIndexOf('.'))] }\n        }]\n      })\n      \n      const writable = await fileHandle.createWritable()\n      await writable.write(content)\n      await writable.close()\n    } else {\n      const fs = await import('fs')\n      fs.writeFileSync(filePath, content, 'utf8')\n    }\n  }\n\n  private parseEnvFile(content: string): Record<string, any> {\n    const result: Record<string, any> = {}\n    \n    content.split('\\n').forEach(line => {\n      line = line.trim()\n      if (line && !line.startsWith('#')) {\n        const [key, ...valueParts] = line.split('=')\n        if (key && valueParts.length > 0) {\n          let value = valueParts.join('=')\n          if (value.startsWith('\"') && value.endsWith('\"')) {\n            value = value.slice(1, -1)\n          }\n          result[key.trim()] = value\n        }\n      }\n    })\n    \n    return result\n  }\n\n  private generateEnvFile(data: Record<string, any>): string {\n    return Object.entries(data)\n      .map(([key, value]) => {\n        const stringValue = String(value)\n        return `${key}=${stringValue.includes(' ') ? `\"${stringValue}\"` : stringValue}`\n      })\n      .join('\\n')\n  }\n}\n","import { SafenvCore } from './core.ts'\nimport { SafenvServer } from './server.ts'\nimport { SafenvBuilder } from './builder.ts'\nimport { SafenvWorkspace } from './workspace.ts'\nimport type { SafenvOptions } from './types.ts'\n\nexport * from './types.ts'\nexport { SafenvCore } from './core.ts'\nexport { SafenvServer } from './server.ts'\nexport { SafenvBuilder } from './builder.ts'\nexport { SafenvWorkspace } from './workspace.ts'\nexport * from './plugins/index.ts'\nexport * from './adapters.ts'\n\nexport function createSafenv(options: SafenvOptions = {}) {\n  return new SafenvCore(options)\n}\n\nexport function createServer(options: SafenvOptions = {}) {\n  return new SafenvServer(options)\n}\n\nexport function createBuilder(options: SafenvOptions = {}) {\n  return new SafenvBuilder(options)\n}\n\nexport function createWorkspace(options: SafenvOptions = {}) {\n  return new SafenvWorkspace(options)\n}\n"],"mappings":"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"}