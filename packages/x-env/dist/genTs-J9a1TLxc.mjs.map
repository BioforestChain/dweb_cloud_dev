{"version":3,"file":"genTs-J9a1TLxc.mjs","names":["options: GenTsPluginOptions","context: SafenvContext","parts: string[]","variables: Record<string, SafenvVariable>","validatorName: string","fields: string[]","parsers: string[]","validators: string[]","variable: SafenvVariable","type: string","exportName: string","extension: string","exports: string[]"],"sources":["../src/plugins/genTs.ts"],"sourcesContent":["import { BasePlugin } from './base.ts'\nimport type { GenTsPluginOptions, SafenvContext, SafenvVariable } from '../types.ts'\n\nexport class GenTsPlugin extends BasePlugin {\n  name = 'genTsPlugin'\n\n  constructor(private options: GenTsPluginOptions) {\n    super()\n  }\n\n  async apply(context: SafenvContext): Promise<void> {\n    const content = this.generateTsContent(context)\n    this.writeFile(this.options.outputPath, content)\n  }\n\n  private generateTsContent(context: SafenvContext): string {\n    const parts: string[] = []\n\n    // Add imports\n    if (this.options.validatorStyle === 'zod') {\n      parts.push(this.generateZodImports(context.config.variables))\n    }\n\n    // Handle different export types\n    if (this.options.exportType === 'named') {\n      parts.push(this.generateNamedExports(context))\n    } else if (this.options.exportType === 'default') {\n      parts.push(this.generateDefaultExport(context))\n    } else {\n      // Original object-based approach\n      parts.push(this.generateValidator(context.config.variables))\n      \n      if (this.options.exportMode) {\n        parts.push(this.generateExport(context))\n      }\n    }\n\n    return parts.join('\\n\\n')\n  }\n\n  private generateZodImports(variables: Record<string, SafenvVariable>): string {\n    const usedTypes = new Set<string>()\n    \n    Object.values(variables).forEach(variable => {\n      switch (variable.type) {\n        case 'string':\n          usedTypes.add('string')\n          break\n        case 'number':\n          usedTypes.add('number')\n          break\n        case 'boolean':\n          usedTypes.add('boolean')\n          break\n        case 'array':\n          usedTypes.add('array')\n          usedTypes.add('string')\n          break\n        case 'object':\n          usedTypes.add('record')\n          usedTypes.add('any')\n          break\n      }\n    })\n\n    return `import { z } from 'zod'`\n  }\n\n  private generateValidator(variables: Record<string, SafenvVariable>): string {\n    const validatorName = this.options.validatorName || 'zSafenv'\n    \n    if (this.options.validatorStyle === 'zod') {\n      return this.generateZodValidator(validatorName, variables)\n    } else {\n      return this.generatePureValidator(validatorName, variables)\n    }\n  }\n\n  private generateZodValidator(validatorName: string, variables: Record<string, SafenvVariable>): string {\n    const fields: string[] = []\n\n    Object.entries(variables).forEach(([key, variable]) => {\n      let fieldDef = this.getZodType(variable)\n      \n      if (variable.default !== undefined) {\n        fieldDef += `.default(${JSON.stringify(variable.default)})`\n      }\n      \n      if (!variable.required) {\n        fieldDef += '.optional()'\n      }\n\n      fields.push(`  ${key}: ${fieldDef}`)\n    })\n\n    const exportPrefix = this.options.exportValidator !== false ? 'export ' : ''\n    return `${exportPrefix}const ${validatorName} = z.object({\\n${fields.join(',\\n')}\\n})`\n  }\n\n  private generatePureValidator(validatorName: string, variables: Record<string, SafenvVariable>): string {\n    const parsers: string[] = []\n    const validators: string[] = []\n\n    Object.entries(variables).forEach(([key, variable]) => {\n      const parser = this.getPureParser(variable.type)\n      parsers.push(`  ${key}: ${parser}`)\n    })\n\n    validators.push(`const parsers = {\\n${parsers.join(',\\n')}\\n}`)\n\n    const parseLogic = Object.entries(variables).map(([key, variable]) => {\n      let logic = `const ${key}Raw = env.${key}`\n      \n      if (variable.default !== undefined) {\n        logic += ` ?? ${JSON.stringify(variable.default)}`\n      }\n      \n      if (variable.required) {\n        logic += `\\n  if (${key}Raw === undefined) throw new Error('Required variable ${key} is not set')`\n      }\n      \n      logic += `\\n  const ${key} = parsers.${key}(${key}Raw)`\n      \n      return logic\n    }).join('\\n  ')\n\n    const returnObj = Object.keys(variables).map(key => `    ${key}`).join(',\\n')\n\n    const exportPrefix = this.options.exportValidator !== false ? 'export ' : ''\n    \n    return `${parsers.join('\\n')}\n\n${exportPrefix}const ${validatorName} = {\n  parse: (env: Record<string, any>) => {\n    ${parseLogic}\n    \n    return {\n${returnObj}\n    }\n  }\n}`\n  }\n\n  private getZodType(variable: SafenvVariable): string {\n    switch (variable.type) {\n      case 'string':\n        return 'z.string()'\n      case 'number':\n        return 'z.number()'\n      case 'boolean':\n        return 'z.boolean()'\n      case 'array':\n        return 'z.array(z.string())'\n      case 'object':\n        return 'z.record(z.any())'\n      default:\n        return 'z.string()'\n    }\n  }\n\n  private getPureParser(type: string): string {\n    switch (type) {\n      case 'string':\n        return '(v: any) => String(v)'\n      case 'number':\n        return '(v: any) => Number(v)'\n      case 'boolean':\n        return '(v: any) => String(v).toLowerCase() === \"true\"'\n      case 'array':\n        return '(v: any) => String(v).split(\",\").map(s => s.trim())'\n      case 'object':\n        return '(v: any) => JSON.parse(String(v))'\n      default:\n        return '(v: any) => String(v)'\n    }\n  }\n\n  private generateExport(context: SafenvContext): string {\n    const exportName = this.options.exportName || 'safenv'\n    const validatorName = this.options.validatorName || 'zSafenv'\n\n    switch (this.options.exportMode) {\n      case 'process.env':\n        return `export const ${exportName} = ${validatorName}.parse(process.env)`\n\n      case 'process.env-static':\n        return this.generateStaticExport(context, exportName, validatorName)\n\n      case 'env-file':\n        return this.generateEnvFileExport(context, exportName, validatorName)\n\n      case 'json-file':\n      case 'yaml-file':\n      case 'toml-file':\n        return this.generateFileExport(context, exportName, validatorName)\n\n      default:\n        return `export const ${exportName} = ${validatorName}.parse(process.env)`\n    }\n  }\n\n  private generateStaticExport(context: SafenvContext, exportName: string, validatorName: string): string {\n    const staticExports = Object.keys(context.config.variables).map(key => {\n      const constName = `${exportName.toUpperCase()}_${key}`\n      return `export const ${constName} = /* @__PURE__ */ ${validatorName}.shape.${key}.parse(process.env.${key})`\n    })\n\n    return staticExports.join('\\n')\n  }\n\n  private generateEnvFileExport(context: SafenvContext, exportName: string, validatorName: string): string {\n    const deps = this.options.customDeps || []\n    const injectCode = this.options.customInjectCode || []\n    \n    const imports = deps.length > 0 ? deps.map(dep => `import '${dep}'`).join('\\n') + '\\n' : ''\n    const injectedCode = injectCode.join('\\n')\n    \n    return `${imports}${injectedCode}\nimport { existsSync } from 'node:fs'\nimport { resolve } from 'node:path'\n\nconst envFile = resolve(import.meta.dirname, '${context.config.name}.safenv.env')\nif (existsSync(envFile)) {\n  process.loadEnvFile(envFile)\n}\n\nexport const ${exportName} = ${validatorName}.parse(process.env)`\n  }\n\n  private generateFileExport(context: SafenvContext, exportName: string, validatorName: string): string {\n    const mode = this.options.exportMode!\n    const extension = mode.split('-')[0]\n    const deps = this.options.customDeps || this.getDefaultDeps(extension)\n    const injectCode = this.options.customInjectCode || this.getDefaultInjectCode(extension)\n    \n    const imports = deps.map(dep => `import '${dep}'`).join('\\n')\n    const fileName = `${context.config.name}.safenv.${extension}`\n    \n    return `${imports}\n${injectCode.join('\\n')}\nimport { existsSync, readFileSync } from 'node:fs'\nimport { resolve } from 'node:path'\n\nconst configFile = resolve(import.meta.dirname, '${fileName}')\nlet config = {}\nif (existsSync(configFile)) {\n  const content = readFileSync(configFile, 'utf8')\n  config = ${this.getParseFunction(extension)}(content)\n}\n\nexport const ${exportName} = ${validatorName}.parse(config)`\n  }\n\n  private getDefaultDeps(extension: string): string[] {\n    switch (extension) {\n      case 'json':\n        return []\n      case 'yaml':\n        return ['js-yaml']\n      case 'toml':\n        return ['@iarna/toml']\n      default:\n        return []\n    }\n  }\n\n  private getDefaultInjectCode(extension: string): string[] {\n    switch (extension) {\n      case 'json':\n        return []\n      case 'yaml':\n        return [\"import YAML from 'js-yaml'\"]\n      case 'toml':\n        return [\"import TOML from '@iarna/toml'\"]\n      default:\n        return []\n    }\n  }\n\n  private getParseFunction(extension: string): string {\n    switch (extension) {\n      case 'json':\n        return 'JSON.parse'\n      case 'yaml':\n        return 'YAML.load'\n      case 'toml':\n        return 'TOML.parse'\n      default:\n        return 'JSON.parse'\n    }\n  }\n\n  private generateNamedExports(context: SafenvContext): string {\n    const exports: string[] = []\n\n    Object.entries(context.config.variables).forEach(([key, variable]) => {\n      if (this.options.validatorStyle === 'zod') {\n        const zodType = this.getZodType(variable)\n        let fieldDef = zodType\n        \n        if (variable.default !== undefined) {\n          fieldDef += `.default(${JSON.stringify(variable.default)})`\n        }\n        \n        if (!variable.required) {\n          fieldDef += '.optional()'\n        }\n\n        exports.push(`export const ${key} = ${fieldDef}.parse(process.env.${key})`)\n      } else {\n        const value = context.resolvedVariables[key] !== undefined \n          ? JSON.stringify(context.resolvedVariables[key])\n          : 'process.env.' + key\n        exports.push(`export const ${key} = ${value}`)\n      }\n    })\n\n    return exports.join('\\n')\n  }\n\n  private generateDefaultExport(context: SafenvContext): string {\n    if (this.options.validatorStyle === 'none') {\n      const fields = Object.entries(context.resolvedVariables)\n        .map(([key, value]) => `  ${key}: ${JSON.stringify(value)}`)\n        .join(',\\n')\n      \n      return `export default {\\n${fields}\\n}`\n    } else {\n      // Generate validator and use it for default export\n      const validator = this.generateValidator(context.config.variables)\n      const validatorName = this.options.validatorName || 'zSafenv'\n      \n      return `${validator}\\n\\nexport default ${validatorName}.parse(process.env)`\n    }\n  }\n}\n"],"mappings":"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"}