{"version":3,"file":"genFile-BsNqFjb-.mjs","names":["options: GenFilePluginOptions","context: SafenvContext","content: string","variables: Record<string, any>","value: any"],"sources":["../src/plugins/genFile.ts"],"sourcesContent":["import { resolve } from 'node:path'\nimport { createServer } from 'node:http' \nimport { BasePlugin } from './base.ts'\nimport type { GenFilePluginOptions, SafenvContext } from '../types.ts'\n\nexport class GenFilePlugin extends BasePlugin {\n  name = 'genFilePlugin'\n  private server?: any\n\n  constructor(private options: GenFilePluginOptions) {\n    super()\n  }\n\n  async apply(context: SafenvContext): Promise<void> {\n    const outputDir = this.options.outputDir || context.outputDir\n\n    // Generate config files\n    for (const format of this.options.formats) {\n      const fileName = `${this.options.name}.safenv.${format}`\n      const filePath = resolve(outputDir, fileName)\n      \n      let content: string\n\n      switch (format) {\n        case 'env':\n          content = this.generateEnvFile(context.resolvedVariables)\n          break\n        case 'json':\n          content = this.generateJsonFile(context.resolvedVariables)\n          break\n        case 'yaml':\n          content = this.generateYamlFile(context.resolvedVariables)\n          break\n        case 'toml':\n          content = this.generateTomlFile(context.resolvedVariables)\n          break\n        default:\n          throw new Error(`Unsupported format: ${format}`)\n      }\n\n      this.writeFile(filePath, content)\n    }\n\n    // Start web-ui if enabled and in serve mode\n    if (this.options.webUi?.enabled && context.mode === 'serve') {\n      await this.startWebUi(context)\n    }\n\n    // Generate HTML tools if enabled\n    if (this.options.htmlTools?.enabled) {\n      await this.generateHtmlTools(context)\n    }\n  }\n\n  private generateEnvFile(variables: Record<string, any>): string {\n    return Object.entries(variables)\n      .map(([key, value]) => `${key}=${this.stringifyValue(value)}`)\n      .join('\\n')\n  }\n\n  private generateJsonFile(variables: Record<string, any>): string {\n    return JSON.stringify(variables, null, 2)\n  }\n\n  private generateYamlFile(variables: Record<string, any>): string {\n    const yaml = require('js-yaml')\n    return yaml.dump(variables)\n  }\n\n  private generateTomlFile(variables: Record<string, any>): string {\n    const TOML = require('@iarna/toml')\n    return TOML.stringify(variables)\n  }\n\n  private stringifyValue(value: any): string {\n    if (typeof value === 'string') {\n      return value.includes(' ') || value.includes('\"') ? `\"${value.replace(/\"/g, '\\\\\"')}\"` : value\n    }\n    if (Array.isArray(value)) {\n      return value.join(',')\n    }\n    if (typeof value === 'object' && value !== null) {\n      return JSON.stringify(value)\n    }\n    return String(value)\n  }\n\n  private async startWebUi(context: SafenvContext): Promise<void> {\n    const port = this.options.webUi?.port || 3000\n    const host = this.options.webUi?.host || 'localhost'\n    \n    this.server = createServer(async (req, res) => {\n      res.setHeader('Access-Control-Allow-Origin', '*')\n      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n      res.setHeader('Access-Control-Allow-Headers', 'Content-Type')\n      \n      if (req.method === 'OPTIONS') {\n        res.writeHead(200)\n        res.end()\n        return\n      }\n      \n      const url = new URL(req.url!, `http://${host}:${port}`)\n      \n      if (url.pathname === '/api/config') {\n        if (req.method === 'GET') {\n          res.writeHead(200, { 'Content-Type': 'application/json' })\n          res.end(JSON.stringify({\n            config: context.config,\n            resolvedVariables: context.resolvedVariables\n          }))\n        } else if (req.method === 'POST') {\n          let body = ''\n          req.on('data', chunk => { body += chunk })\n          req.on('end', async () => {\n            try {\n              const { variables } = JSON.parse(body)\n              // Update config files with new variables\n              for (const format of this.options.formats) {\n                const fileName = `${this.options.name}.safenv.${format}`\n                const filePath = resolve(context.outputDir, fileName)\n                let content: string\n                \n                switch (format) {\n                  case 'env':\n                    content = this.generateEnvFile(variables)\n                    break\n                  case 'json':\n                    content = this.generateJsonFile(variables)\n                    break\n                  case 'yaml':\n                    content = this.generateYamlFile(variables)\n                    break\n                  case 'toml':\n                    content = this.generateTomlFile(variables)\n                    break\n                }\n                \n                this.writeFile(filePath, content)\n              }\n              \n              res.writeHead(200, { 'Content-Type': 'application/json' })\n              res.end(JSON.stringify({ success: true }))\n            } catch (error) {\n              res.writeHead(400, { 'Content-Type': 'application/json' })\n              res.end(JSON.stringify({ error: error instanceof Error ? error.message : String(error) }))\n            }\n          })\n        }\n      } else if (url.pathname === '/') {\n        res.writeHead(200, { 'Content-Type': 'text/html' })\n        res.end(this.generateWebUiHtml(context))\n      } else {\n        res.writeHead(404)\n        res.end('Not Found')\n      }\n    })\n    \n    this.server.listen(port, host, () => {\n      console.log(`Safenv Web UI running at http://${host}:${port}`)\n    })\n  }\n\n  private generateWebUiHtml(context: SafenvContext): string {\n    return `<!DOCTYPE html>\n<html>\n<head>\n    <title>Safenv Configuration</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .variable { margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }\n        input[type=\"text\"], textarea { width: 100%; padding: 8px; margin: 4px 0; }\n        button { padding: 8px 16px; margin: 4px; }\n        .description { color: #666; font-size: 0.9em; }\n    </style>\n</head>\n<body>\n    <h1>Safenv Configuration: ${context.config.name}</h1>\n    <div id=\"variables\"></div>\n    <button onclick=\"saveConfig()\">Save Configuration</button>\n    <button onclick=\"importConfig()\">Import</button>\n    <button onclick=\"exportConfig()\">Export</button>\n    \n    <script>\n        const config = ${JSON.stringify(context.config)};\n        const resolvedVariables = ${JSON.stringify(context.resolvedVariables)};\n        \n        function renderVariables() {\n            const container = document.getElementById('variables');\n            container.innerHTML = '';\n            \n            Object.entries(config.variables).forEach(([key, variable]) => {\n                const div = document.createElement('div');\n                div.className = 'variable';\n                \n                const value = resolvedVariables[key] || variable.default || '';\n                \n                div.innerHTML = \\`\n                    <label><strong>\\${key}</strong> (\\${variable.type})\\${variable.required ? ' *' : ''}</label>\n                    \\${variable.description ? \\`<div class=\"description\">\\${variable.description}</div>\\` : ''}\n                    <input type=\"text\" id=\"\\${key}\" value=\"\\${value}\" />\n                \\`;\n                \n                container.appendChild(div);\n            });\n        }\n        \n        async function saveConfig() {\n            const variables = {};\n            Object.keys(config.variables).forEach(key => {\n                variables[key] = document.getElementById(key).value;\n            });\n            \n            try {\n                const response = await fetch('/api/config', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ variables })\n                });\n                \n                if (response.ok) {\n                    alert('Configuration saved!');\n                } else {\n                    alert('Failed to save configuration');\n                }\n            } catch (error) {\n                alert('Error: ' + error.message);\n            }\n        }\n        \n        function importConfig() {\n            // Use file input for importing\n            const input = document.createElement('input');\n            input.type = 'file';\n            input.accept = '.json,.yaml,.yml,.env,.toml';\n            input.onchange = async (e) => {\n                const file = e.target.files[0];\n                if (file) {\n                    const text = await file.text();\n                    // Parse and update form based on file content\n                    // Implementation would depend on file format\n                }\n            };\n            input.click();\n        }\n        \n        function exportConfig() {\n            const variables = {};\n            Object.keys(config.variables).forEach(key => {\n                variables[key] = document.getElementById(key).value;\n            });\n            \n            const blob = new Blob([JSON.stringify(variables, null, 2)], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = \\`\\${config.name}.safenv.json\\`;\n            a.click();\n            URL.revokeObjectURL(url);\n        }\n        \n        renderVariables();\n    </script>\n</body>\n</html>`;\n  }\n\n  private async generateHtmlTools(context: SafenvContext): Promise<void> {\n    const outputPath = this.options.htmlTools?.outputPath || resolve(context.outputDir, 'safenv-tools.html')\n    \n    const htmlContent = `<!DOCTYPE html>\n<html>\n<head>\n    <title>Safenv Tools - ${context.config.name}</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }\n        .variable { margin: 10px 0; padding: 10px; border: 1px solid #eee; border-radius: 4px; }\n        input[type=\"text\"], textarea { width: 100%; padding: 8px; margin: 4px 0; box-sizing: border-box; }\n        button { padding: 10px 20px; margin: 8px 4px; background: #007cba; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background: #005a87; }\n        .description { color: #666; font-size: 0.9em; margin: 4px 0; }\n        .file-ops { display: flex; gap: 10px; flex-wrap: wrap; }\n    </style>\n</head>\n<body>\n    <h1>Safenv Configuration Tools</h1>\n    <h2>Project: ${context.config.name}</h2>\n    \n    <div class=\"section\">\n        <h3>Configuration Variables</h3>\n        <div id=\"variables\"></div>\n        <div class=\"file-ops\">\n            <button onclick=\"importConfig()\">📁 Import Configuration</button>\n            <button onclick=\"exportConfig('json')\">💾 Export as JSON</button>\n            <button onclick=\"exportConfig('yaml')\">💾 Export as YAML</button>\n            <button onclick=\"exportConfig('env')\">💾 Export as ENV</button>\n            <button onclick=\"exportConfig('toml')\">💾 Export as TOML</button>\n        </div>\n    </div>\n    \n    <script>\n        const config = ${JSON.stringify(context.config)};\n        const resolvedVariables = ${JSON.stringify(context.resolvedVariables)};\n        \n        function renderVariables() {\n            const container = document.getElementById('variables');\n            container.innerHTML = '';\n            \n            Object.entries(config.variables).forEach(([key, variable]) => {\n                const div = document.createElement('div');\n                div.className = 'variable';\n                \n                const value = resolvedVariables[key] || variable.default || '';\n                \n                div.innerHTML = \\`\n                    <label><strong>\\${key}</strong> (\\${variable.type})\\${variable.required ? ' <span style=\"color: red\">*</span>' : ''}</label>\n                    \\${variable.description ? \\`<div class=\"description\">\\${variable.description}</div>\\` : ''}\n                    <input type=\"text\" id=\"var_\\${key}\" value=\"\\${String(value)}\" placeholder=\"\\${variable.default ? 'Default: ' + variable.default : 'No default value'}\" />\n                \\`;\n                \n                container.appendChild(div);\n            });\n        }\n        \n        function getCurrentVariables() {\n            const variables = {};\n            Object.keys(config.variables).forEach(key => {\n                const input = document.getElementById('var_' + key);\n                if (input && input.value.trim()) {\n                    variables[key] = input.value.trim();\n                }\n            });\n            return variables;\n        }\n        \n        async function importConfig() {\n            try {\n                const [fileHandle] = await window.showOpenFilePicker({\n                    types: [{\n                        description: 'Configuration files',\n                        accept: {\n                            'application/json': ['.json'],\n                            'application/x-yaml': ['.yaml', '.yml'],\n                            'text/plain': ['.env', '.toml']\n                        }\n                    }]\n                });\n                \n                const file = await fileHandle.getFile();\n                const content = await file.text();\n                \n                let importedData = {};\n                if (file.name.endsWith('.json')) {\n                    importedData = JSON.parse(content);\n                } else if (file.name.endsWith('.yaml') || file.name.endsWith('.yml')) {\n                    // Note: Would need js-yaml loaded for this to work\n                    importedData = jsyaml.load(content);\n                } else if (file.name.endsWith('.env')) {\n                    importedData = parseEnvFile(content);\n                }\n                \n                // Update form with imported data\n                Object.entries(importedData).forEach(([key, value]) => {\n                    const input = document.getElementById('var_' + key);\n                    if (input) {\n                        input.value = String(value);\n                    }\n                });\n                \n                alert('Configuration imported successfully!');\n            } catch (error) {\n                if (error.name !== 'AbortError') {\n                    alert('Error importing file: ' + error.message);\n                }\n            }\n        }\n        \n        async function exportConfig(format) {\n            const variables = getCurrentVariables();\n            let content, fileName, mimeType;\n            \n            switch (format) {\n                case 'json':\n                    content = JSON.stringify(variables, null, 2);\n                    fileName = \\`\\${config.name}.safenv.json\\`;\n                    mimeType = 'application/json';\n                    break;\n                case 'yaml':\n                    // Simple YAML export (basic implementation)\n                    content = Object.entries(variables).map(([k, v]) => \\`\\${k}: \\${JSON.stringify(v)}\\`).join('\\\\n');\n                    fileName = \\`\\${config.name}.safenv.yaml\\`;\n                    mimeType = 'application/x-yaml';\n                    break;\n                case 'env':\n                    content = Object.entries(variables).map(([k, v]) => \\`\\${k}=\\${String(v).includes(' ') ? '\"' + v + '\"' : v}\\`).join('\\\\n');\n                    fileName = \\`\\${config.name}.safenv.env\\`;\n                    mimeType = 'text/plain';\n                    break;\n                case 'toml':\n                    // Simple TOML export (basic implementation)\n                    content = Object.entries(variables).map(([k, v]) => \\`\\${k} = \\${JSON.stringify(v)}\\`).join('\\\\n');\n                    fileName = \\`\\${config.name}.safenv.toml\\`;\n                    mimeType = 'application/toml';\n                    break;\n            }\n            \n            try {\n                const fileHandle = await window.showSaveFilePicker({\n                    suggestedName: fileName,\n                    types: [{\n                        description: \\`\\${format.toUpperCase()} files\\`,\n                        accept: { [mimeType]: [fileName.substring(fileName.lastIndexOf('.'))] }\n                    }]\n                });\n                \n                const writable = await fileHandle.createWritable();\n                await writable.write(content);\n                await writable.close();\n                \n                alert('Configuration exported successfully!');\n            } catch (error) {\n                if (error.name !== 'AbortError') {\n                    // Fallback to download\n                    const blob = new Blob([content], { type: mimeType });\n                    const url = URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.href = url;\n                    a.download = fileName;\n                    a.click();\n                    URL.revokeObjectURL(url);\n                }\n            }\n        }\n        \n        function parseEnvFile(content) {\n            const result = {};\n            content.split('\\\\n').forEach(line => {\n                line = line.trim();\n                if (line && !line.startsWith('#')) {\n                    const [key, ...valueParts] = line.split('=');\n                    if (key && valueParts.length > 0) {\n                        let value = valueParts.join('=');\n                        if ((value.startsWith('\"') && value.endsWith('\"')) || \n                            (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n                            value = value.slice(1, -1);\n                        }\n                        result[key.trim()] = value;\n                    }\n                }\n            });\n            return result;\n        }\n        \n        renderVariables();\n    </script>\n</body>\n</html>`;\n    \n    this.writeFile(outputPath, htmlContent)\n  }\n\n  async cleanup(): Promise<void> {\n    if (this.server) {\n      this.server.close()\n      this.server = undefined\n    }\n  }\n}\n"],"mappings":"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"}